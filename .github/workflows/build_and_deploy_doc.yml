name: deploy-book
defaults:
  run:
    shell: bash -ieo pipefail {0}

# Run this when the master or main branch changes
on:
  push:
    branches:
    - main
    - student_exercises

    # If your git repository has the Jupyter Book within some-subfolder next to
    # unrelated files, you can make this run only if a file within that specific
    # folder has been modified.
    #
    # paths:
    # - some-subfolder/**
  pull_request:
    branches:
    - main

# This job installs dependencies, builds the book, and pushes it to `gh-pages`
jobs:
  deploy-book:
    runs-on: ubuntu-latest
    container:
      image: "pycram/semantic_world:jazzy"
    permissions:
      pages: write
      id-token: write
    steps:
    - uses: actions/checkout@v4
      with:
        path: "ros/src/semantic_world"
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}
        submodules: 'false'

    - name: Update semantic_world source files
      run: |
        rm -rf /opt/ros/semantic_world/* 
        cd /opt/ros/semantic_world
        rm -rf .git .github .gitignore .gitmodules .readthedocs.yaml
        cp -r /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/ros/src/semantic_world /opt/ros

    - name: Install dependencies
      run: |
        sudo apt-get update
        cd /opt/ros/semantic_world
        source /opt/ros/semantic_world-venv/bin/activate
        pip install -U pip && pip install -r requirements.txt && pip install . && pip install -r doc/requirements.txt

    # (optional) Cache your executed notebooks between runs
    # if you have config:
    # execute:
    #   execute_notebooks: cache
    - name: cache executed notebooks
      uses: actions/cache@v4
      with:
        path: doc/_build/.jupyter_cache
        key: jupyter-book-cache-${{ hashFiles('requirements.txt') }}

    - name: Prefilter sources (convert & strip exercise cells)
      run: |
        set -eux
        SRC=/opt/ros/semantic_world/doc
        TMP=/tmp/book_src
        rm -rf "$TMP"
        mkdir -p "$TMP"

        # Copy the book sources (exclude any previous build artifacts)
        rsync -a --delete --exclude '_build/' "$SRC/" "$TMP/"

        # Convert MyST markdown pages to notebooks (side-by-side .ipynb)
        # We skip config/toc files and non-content md (keep it simple with a find filter).
        source /opt/ros/semantic_world-venv/bin/activate
        find "$TMP" -type f -name "*.md" \
          ! -name "_config.md" \
          ! -name "_toc.md" \
          ! -path "*/_build/*" \
          -print0 | xargs -0 -I{} sh -c '
            # Only convert files that contain a MyST code-cell directive to avoid touching prose-only pages
            if grep -q "^{code-cell}" "{}"; then
              jupytext --from md:myst --to ipynb --set-kernel -o "{.ipynb}" "{}"
            fi
          '

        # Strip any cells tagged "exercise" from all produced notebooks
        # (no-op if none exist)
        if ls "$TMP"/*.ipynb "$TMP"/**/*.ipynb >/dev/null 2>&1; then
          # Process notebooks at any depth
          find "$TMP" -type f -name "*.ipynb" -print0 | xargs -0 -I{} \
            jupyter nbconvert \
              --to notebook --inplace \
              --TagRemovePreprocessor.enabled=True \
              --TagRemovePreprocessor.remove_cell_tags='["exercise"]' \
              {}
        fi

        # Optional: remove the original .md pages that were converted so JB uses the cleaned .ipynb
        # Comment this block out if your _toc.yml explicitly references .md
        while IFS= read -r -d '' nb; do
          md="${nb%.ipynb}.md"
          if [ -f "$md" ]; then rm -f "$md"; fi
        done < <(find "$TMP" -type f -name "*.ipynb" -print0)

        # Show a quick tree for debugging
        echo "---- Prefiltered source tree ----"
        find "$TMP" -maxdepth 2 -print

        echo "JB_SRC=$TMP" >> $GITHUB_ENV

    # Build the book
    - name: Build the book
      run: |
        cd /opt/ros/semantic_world
        source /opt/ros/overlay_ws/install/setup.bash
        source /opt/ros/semantic_world-venv/bin/activate
        jupyter-book build doc

    # Upload the book's HTML as an artifact
    - name: Upload artifact
      if: github.event_name == 'push'
      uses: actions/upload-pages-artifact@v3
      with:
        path: "/opt/ros/semantic_world/doc/_build/html"

    # Deploy the book's HTML to GitHub Pages
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push'
      id: deployment
      uses: actions/deploy-pages@v4
